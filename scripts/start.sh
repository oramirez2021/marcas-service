#!/bin/sh

# Script de inicio adaptativo para Docker/K8s
# Detecta el entorno y ejecuta la aplicaci√≥n apropiadamente

echo "üöÄ Iniciando Marcas Service..."
echo "üìã Entorno: ${NODE_ENV:-development}"
echo "üåê Puerto: ${PORT:-3000}"

# Verificar si estamos en Lambda (no deber√≠a pasar en Docker)
if [ -n "$AWS_LAMBDA_FUNCTION_NAME" ]; then
  echo "‚ö†Ô∏è  Detectado entorno Lambda en contenedor Docker - esto no deber√≠a pasar"
  echo "üîÑ Ejecutando como aplicaci√≥n HTTP est√°ndar..."
fi

# Verificar si el directorio dist existe
if [ ! -d "dist" ]; then
  echo "‚ùå Directorio dist no encontrado. Compilando aplicaci√≥n..."
  npm run build
fi

# Verificar si node_modules existe
if [ ! -d "node_modules" ]; then
  echo "‚ùå node_modules no encontrado. Instalando dependencias..."
  npm install --only=production
fi

# Configurar variables de entorno para Docker/K8s
export NODE_ENV=${NODE_ENV:-production}
export PORT=${PORT:-3000}

# Log de configuraci√≥n
echo "üîß Configuraci√≥n:"
echo "   - NODE_ENV: $NODE_ENV"
echo "   - PORT: $PORT"
echo "   - DB_HOST: ${DB_HOST:-localhost}"
echo "   - DB_PORT: ${DB_PORT:-1521}"
echo "   - DB_NAME: ${DB_NAME:-marcas_api}"

# Verificar conectividad de base de datos (opcional)
if [ -n "$DB_HOST" ] && [ "$DB_HOST" != "localhost" ]; then
  echo "üîç Verificando conectividad de base de datos..."
  # Aqu√≠ podr√≠as agregar un ping o verificaci√≥n de conectividad
fi

echo "‚úÖ Iniciando aplicaci√≥n NestJS..."

# Ejecutar aplicaci√≥n
exec node dist/main.js
